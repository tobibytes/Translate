/**
 * @fileoverview gRPC-Web generated client stub for translate
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.30.2
// source: text.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as text_pb from './text_pb'; // proto import: "text.proto"


export class TranslationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSendAudioBytes = new grpcWeb.MethodDescriptor(
    '/translate.TranslationService/SendAudioBytes',
    grpcWeb.MethodType.UNARY,
    text_pb.AudioBytes,
    text_pb.Empty,
    (request: text_pb.AudioBytes) => {
      return request.serializeBinary();
    },
    text_pb.Empty.deserializeBinary
  );

  sendAudioBytes(
    request: text_pb.AudioBytes,
    metadata?: grpcWeb.Metadata | null): Promise<text_pb.Empty>;

  sendAudioBytes(
    request: text_pb.AudioBytes,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: text_pb.Empty) => void): grpcWeb.ClientReadableStream<text_pb.Empty>;

  sendAudioBytes(
    request: text_pb.AudioBytes,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: text_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/translate.TranslationService/SendAudioBytes',
        request,
        metadata || {},
        this.methodDescriptorSendAudioBytes,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/translate.TranslationService/SendAudioBytes',
    request,
    metadata || {},
    this.methodDescriptorSendAudioBytes);
  }

  methodDescriptorReceiveTextResponse = new grpcWeb.MethodDescriptor(
    '/translate.TranslationService/ReceiveTextResponse',
    grpcWeb.MethodType.SERVER_STREAMING,
    text_pb.Empty,
    text_pb.TextResponse,
    (request: text_pb.Empty) => {
      return request.serializeBinary();
    },
    text_pb.TextResponse.deserializeBinary
  );

  receiveTextResponse(
    request: text_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<text_pb.TextResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/translate.TranslationService/ReceiveTextResponse',
      request,
      metadata || {},
      this.methodDescriptorReceiveTextResponse);
  }

}

